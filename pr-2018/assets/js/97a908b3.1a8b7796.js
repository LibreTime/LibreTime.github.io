"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5092],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,k=m["".concat(o,".").concat(c)]||m[c]||d[c]||l;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},52498:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={title:"Releases"},i=void 0,s={unversionedId:"developer-manual/development/releases",id:"developer-manual/development/releases",title:"Releases",description:"Distributions releases support",source:"@site/../docs/developer-manual/development/releases.md",sourceDirName:"developer-manual/development",slug:"/developer-manual/development/releases",permalink:"/pr-2018/docs/next/developer-manual/development/releases",draft:!1,editUrl:"https://github.com/libretime/libretime/blob/main/docs/../docs/developer-manual/development/releases.md",tags:[],version:"current",frontMatter:{title:"Releases"},sidebar:"tutorialSidebar",previous:{title:"Development environment",permalink:"/pr-2018/docs/next/developer-manual/development/environment"},next:{title:"LibreTime API usage",permalink:"/pr-2018/docs/next/developer-manual/legacy-api"}},o={},p=[{value:"Distributions releases support",id:"distributions-releases-support",level:2},{value:"Versioning schema",id:"versioning-schema",level:2},{value:"Releasing a new version",id:"releasing-a-new-version",level:2},{value:"1. Version bump",id:"1-version-bump",level:3},{value:"2. Release note",id:"2-release-note",level:3},{value:"3. Website and docs",id:"3-website-and-docs",level:3},{value:"4. Create a new pull request",id:"4-create-a-new-pull-request",level:3},{value:"5. Create and push a tag",id:"5-create-and-push-a-tag",level:3}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"distributions-releases-support"},"Distributions releases support"),(0,r.kt)("p",null,"New releases target the current stable distributions release, and development should prepare for future stable distributions releases."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We recommend installing LibreTime on the current stable distributions."),(0,r.kt)("li",{parentName:"ul"},"Maintenance only releases will provide bug and security fixes for stable and old stable distributions.")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:"center"},"Ubuntu 18.04"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Debian 10"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Ubuntu 20.04"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Debian 11"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Release date"),(0,r.kt)("td",{parentName:"tr",align:"center"},"2018-04-26"),(0,r.kt)("td",{parentName:"tr",align:"center"},"2019-07-06"),(0,r.kt)("td",{parentName:"tr",align:"center"},"2020-04-23"),(0,r.kt)("td",{parentName:"tr",align:"center"},"2021-08-14")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"End of life"),(0,r.kt)("td",{parentName:"tr",align:"center"},"2023-04"),(0,r.kt)("td",{parentName:"tr",align:"center"},"2024-06"),(0,r.kt)("td",{parentName:"tr",align:"center"},"2025-04"),(0,r.kt)("td",{parentName:"tr",align:"center"},"2026-06")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Versions"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3.0.x"),(0,r.kt)("td",{parentName:"tr",align:"center"},"maintenance"),(0,r.kt)("td",{parentName:"tr",align:"center"},"maintenance"),(0,r.kt)("td",{parentName:"tr",align:"center"},"recommended"),(0,r.kt)("td",{parentName:"tr",align:"center"},"recommended")))),(0,r.kt)("h2",{id:"versioning-schema"},"Versioning schema"),(0,r.kt)("p",null,"We follow the ",(0,r.kt)("a",{parentName:"p",href:"https://semver.org/spec/v2.0.0.html"},"Semantic Versioning")," standards."),(0,r.kt)("p",null,"In a nutshell, given a version number ",(0,r.kt)("inlineCode",{parentName:"p"},"MAJOR.MINOR.PATCH")," we increment the:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"MAJOR")," version when we make incompatible API changes,"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"MINOR")," version when we add functionality in a backwards-compatible manner, and"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"PATCH")," version when we make backwards-compatible bug fixes.")),(0,r.kt)("h2",{id:"releasing-a-new-version"},"Releasing a new version"),(0,r.kt)("p",null,"This guide walks you through the steps required to release a new version of LibreTime."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This guide is still a work in progress, and does not cover every use cases. Depending on\nthe version bump, some steps might be wrong. For example, in case of a patch release,\nthe documentation requires different changes.")),(0,r.kt)("p",null,"Before releasing a new version, make sure linter don't fail and tests are passing."),(0,r.kt)("p",null,"Start by cleaning the repository and make sure you don't have uncommitted changes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git checkout main\nmake clean\ngit status\n")),(0,r.kt)("p",null,"Choose the next version based the our ",(0,r.kt)("a",{parentName:"p",href:"#versioning-schema"},"versioning schema"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export VERSION=3.0.0-beta.0\n")),(0,r.kt)("p",null,"Create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"release-$VERSION")," branch and release commit to prepare a release pull request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git checkout -b "release-$VERSION"\ngit commit --allow-empty "chore: release $VERSION"\n')),(0,r.kt)("h3",{id:"1-version-bump"},"1. Version bump"),(0,r.kt)("p",null,"Write the new ",(0,r.kt)("inlineCode",{parentName:"p"},"$VERSION")," to the VERSION file, and bump the python packages version:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'echo $VERSION > VERSION\nbash tools/bump-python-version.sh\n\ngit add .\ngit commit --fixup ":/chore: release $VERSION"\n')),(0,r.kt)("h3",{id:"2-release-note"},"2. Release note"),(0,r.kt)("p",null,"Prepare a new release note based on the ",(0,r.kt)("inlineCode",{parentName:"p"},"docs/releases/unreleased.md")," file. Be sure that\nthe filename match the releases notes naming conventions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ls -l docs/releases/\ncp docs/releases/unreleased.md docs/releases/$VERSION.md\n")),(0,r.kt)("p",null,"The release note file must be updated with:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the version and date of this release,"),(0,r.kt)("li",{parentName:"ul"},"an auto generated features and bug fixes changelog,"),(0,r.kt)("li",{parentName:"ul"},"instructions for upgrading,"),(0,r.kt)("li",{parentName:"ul"},"deprecation notices,"),(0,r.kt)("li",{parentName:"ul"},"remove empty sections.")),(0,r.kt)("p",null,"Reset and clean the ",(0,r.kt)("inlineCode",{parentName:"p"},"docs/releases/unreleased.md")," file for a future version."),(0,r.kt)("p",null,"Update the Github release creation job to use the new release note file in ",(0,r.kt)("inlineCode",{parentName:"p"},".github/workflows/release.yml"),"."),(0,r.kt)("p",null,"Commit the release note changes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git add .\ngit commit --fixup ':/chore: release'\n")),(0,r.kt)("h3",{id:"3-website-and-docs"},"3. Website and docs"),(0,r.kt)("p",null,"Update the version in the website files, the files that need changing are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"website/vars.js")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"website/versions.json"))),(0,r.kt)("p",null,"Replace the old versioned docs with the current docs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mv website/versioned_sidebars/version-*-sidebars.json website/versioned_sidebars/version-$VERSION-sidebars.json\n\nrm -R website/versioned_docs/version-*\ncp -R docs website/versioned_docs/version-$VERSION\n")),(0,r.kt)("p",null,"Commit the website and docs changes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git add .\ngit commit --fixup ':/chore: release'\n")),(0,r.kt)("h3",{id:"4-create-a-new-pull-request"},"4. Create a new pull request"),(0,r.kt)("p",null,"Squash the changes and open a pull request for others to review:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git rebase --autosquash --interactive main\n")),(0,r.kt)("p",null,"Merge the pull request when it is reviewed and ready."),(0,r.kt)("h3",{id:"5-create-and-push-a-tag"},"5. Create and push a tag"),(0,r.kt)("p",null,"Pull the merged release commit:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout main\ngit pull upstream main\n")),(0,r.kt)("p",null,"Make sure ",(0,r.kt)("inlineCode",{parentName:"p"},"HEAD")," is the previously merged release commit and tag it with the new version:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git show --quiet\n\ngit tag -a -m "$VERSION" "$VERSION"\n')),(0,r.kt)("p",null,"Push the tag upstream to finalize the release process:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git push upstream main --follow-tags\n")))}d.isMDXComponent=!0}}]);